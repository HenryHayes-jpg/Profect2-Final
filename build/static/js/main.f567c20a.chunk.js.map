{"version":3,"sources":["utils/constants.js","components/App.js","components/Header.js","components/FilesList.js","router/AppRouter.js","index.js"],"names":["API_URL","App","props","useState","file","setFile","previewSrc","setPreviewSrc","title","description","state","setState","errorMsg","setErrorMsg","isPreviewAvailable","setIsPreviewAvailable","dropRef","useRef","handleInputChange","event","target","name","value","updateBorder","dragState","current","style","border","handleOnSubmit","a","preventDefault","trim","formData","FormData","append","axios","post","headers","history","push","response","data","Fragment","Form","className","onSubmit","Row","Col","Group","controlId","Control","type","placeholder","onChange","onDrop","files","uploadedFile","fileReader","FileReader","onload","result","readAsDataURL","match","onDragEnter","onDragLeave","getRootProps","getInputProps","ref","src","alt","Button","variant","Header","activeClassName","to","exact","FilesList","filesList","setFilesList","useEffect","get","getFilesList","downloadFile","id","path","mimetype","responseType","split","filename","length","download","status","map","_id","file_path","file_mimetype","key","href","onClick","colSpan","fontWeight","AppRouter","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f567c20a.chunk.js","sourcesContent":["export const API_URL = 'http://localhost:3030';\r\n","import React, { useState, useRef } from 'react';\r\nimport Dropzone from 'react-dropzone';\r\nimport axios from 'axios';\r\nimport { Form, Row, Col, Button } from 'react-bootstrap';\r\nimport { API_URL } from '../utils/constants';\r\n\r\nconst App = (props) => {\r\n  const [file, setFile] = useState(null); // state for storing actual image\r\n  const [previewSrc, setPreviewSrc] = useState(''); // state for storing previewImage\r\n  const [state, setState] = useState({\r\n    title: '',\r\n    description: ''\r\n  });\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n  const [isPreviewAvailable, setIsPreviewAvailable] = useState(false); // state to show preview only for images\r\n  const dropRef = useRef(); // React ref for managing the hover state of droppable area\r\n\r\n  const handleInputChange = (event) => {\r\n    setState({\r\n      ...state,\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  const onDrop = (files) => {\r\n    const [uploadedFile] = files;\r\n    setFile(uploadedFile);\r\n\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n      setPreviewSrc(fileReader.result);\r\n    };\r\n    fileReader.readAsDataURL(uploadedFile);\r\n    setIsPreviewAvailable(uploadedFile.name.match(/\\.(jpeg|jpg|png)$/));\r\n    dropRef.current.style.border = '2px dashed #e9ebeb';\r\n  };\r\n\r\n  const updateBorder = (dragState) => {\r\n    if (dragState === 'over') {\r\n      dropRef.current.style.border = '2px solid #000';\r\n    } else if (dragState === 'leave') {\r\n      dropRef.current.style.border = '2px dashed #e9ebeb';\r\n    }\r\n  };\r\n\r\n  const handleOnSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      const { title, description } = state;\r\n      if (title.trim() !== '' && description.trim() !== '') {\r\n        if (file) {\r\n          const formData = new FormData();\r\n          formData.append('file', file);\r\n          formData.append('title', title);\r\n          formData.append('description', description);\r\n\r\n          setErrorMsg('');\r\n          await axios.post(`${API_URL}/upload`, formData, {\r\n            headers: {\r\n              'Content-Type': 'multipart/form-data'\r\n            }\r\n          });\r\n          props.history.push('/list');\r\n        } else {\r\n          setErrorMsg('Please select a file to add.');\r\n        }\r\n      } else {\r\n        setErrorMsg('Please enter all the field values.');\r\n      }\r\n    } catch (error) {\r\n      error.response && setErrorMsg(error.response.data);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Form className=\"search-form\" onSubmit={handleOnSubmit}>\r\n        {errorMsg && <p className=\"errorMsg\">{errorMsg}</p>}\r\n        <Row>\r\n          <Col>\r\n            <Form.Group controlId=\"title\">\r\n              <Form.Control\r\n                type=\"text\"\r\n                name=\"title\"\r\n                value={state.title || ''}\r\n                placeholder=\"Enter title\"\r\n                onChange={handleInputChange}\r\n              />\r\n            </Form.Group>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <Form.Group controlId=\"description\">\r\n              <Form.Control\r\n                type=\"text\"\r\n                name=\"description\"\r\n                value={state.description || ''}\r\n                placeholder=\"Enter description\"\r\n                onChange={handleInputChange}\r\n              />\r\n            </Form.Group>\r\n          </Col>\r\n        </Row>\r\n        <div className=\"upload-section\">\r\n          <Dropzone\r\n            onDrop={onDrop}\r\n            onDragEnter={() => updateBorder('over')}\r\n            onDragLeave={() => updateBorder('leave')}\r\n          >\r\n            {({ getRootProps, getInputProps }) => (\r\n              <div {...getRootProps({ className: 'drop-zone' })} ref={dropRef}>\r\n                <input {...getInputProps()} />\r\n                <p>Drag and drop a file OR click here to select a file</p>\r\n                {file && (\r\n                  <div>\r\n                    <strong>Selected file:</strong> {file.name}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </Dropzone>\r\n          {previewSrc ? (\r\n            isPreviewAvailable ? (\r\n              <div className=\"image-preview\">\r\n                <img className=\"preview-image\" src={previewSrc} alt=\"Preview\" />\r\n              </div>\r\n            ) : (\r\n              <div className=\"preview-message\">\r\n                <p>No preview available for this file</p>\r\n              </div>\r\n            )\r\n          ) : (\r\n            <div className=\"preview-message\">\r\n              <p>Image preview will be shown here after selection</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1>File Upload And Download</h1>\r\n      <nav>\r\n        <NavLink activeClassName=\"active\" to=\"/\" exact={true}>\r\n          Home\r\n        </NavLink>\r\n        <NavLink activeClassName=\"active\" to=\"/list\">\r\n          Files List\r\n        </NavLink>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect } from 'react';\r\nimport download from 'downloadjs';\r\nimport axios from 'axios';\r\nimport { API_URL } from '../utils/constants';\r\n\r\nconst FilesList = () => {\r\n  const [filesList, setFilesList] = useState([]);\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n\r\n  useEffect(() => {\r\n    const getFilesList = async () => {\r\n      try {\r\n        const { data } = await axios.get(`${API_URL}/getAllFiles`);\r\n        setErrorMsg('');\r\n        setFilesList(data);\r\n      } catch (error) {\r\n        error.response && setErrorMsg(error.response.data);\r\n      }\r\n    };\r\n\r\n    getFilesList();\r\n  }, []);\r\n\r\n  const downloadFile = async (id, path, mimetype) => {\r\n    try {\r\n      const result = await axios.get(`${API_URL}/download/${id}`, {\r\n        responseType: 'blob'\r\n      });\r\n      const split = path.split('/');\r\n      const filename = split[split.length - 1];\r\n      setErrorMsg('');\r\n      return download(result.data, filename, mimetype);\r\n    } catch (error) {\r\n      if (error.response && error.response.status === 400) {\r\n        setErrorMsg('Error while downloading file. Try again later');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"files-container\">\r\n      {errorMsg && <p className=\"errorMsg\">{errorMsg}</p>}\r\n      <table className=\"files-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Title</th>\r\n            <th>Description</th>\r\n            <th>Download File</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {filesList.length > 0 ? (\r\n            filesList.map(\r\n              ({ _id, title, description, file_path, file_mimetype }) => (\r\n                <tr key={_id}>\r\n                  <td className=\"file-title\">{title}</td>\r\n                  <td className=\"file-description\">{description}</td>\r\n                  <td>\r\n                    <a\r\n                      href=\"#/\"\r\n                      onClick={() =>\r\n                        downloadFile(_id, file_path, file_mimetype)\r\n                      }\r\n                    >\r\n                      Download\r\n                    </a>\r\n                  </td>\r\n                </tr>\r\n              )\r\n            )\r\n          ) : (\r\n            <tr>\r\n              <td colSpan={3} style={{ fontWeight: '300' }}>\r\n                No files found. Please add some.\r\n              </td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilesList;\r\n","import React from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport App from '../components/App';\r\nimport Header from '../components/Header';\r\nimport FilesList from '../components/FilesList';\r\n\r\nconst AppRouter = () => (\r\n  <BrowserRouter>\r\n    <div className=\"container\">\r\n      <Header />\r\n      <div className=\"main-content\">\r\n        <Switch>\r\n          <Route component={App} path=\"/\" exact={true} />\r\n          <Route component={FilesList} path=\"/list\" />\r\n        </Switch>\r\n      </div>\r\n    </div>\r\n  </BrowserRouter>\r\n);\r\n\r\nexport default AppRouter;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport AppRouter from './router/AppRouter';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './styles.scss';\r\n\r\nReactDOM.render(<AppRouter />, document.getElementById('root'));\r\n"],"sourceRoot":""}